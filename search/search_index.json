{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GeniA","text":"<p>Imagine a ChatGPT integrated with your team's tools and APIs, capable of executing tasks and handling queries independently, contributing to time and energy efficiency.</p> <p>GeniA is an AI assistant developed for engineering tasks. GeniA is a dynamic, intuitive tool capable of managing tasks in your team's Slack channel.</p> <p> </p>"},{"location":"add-new-tool/","title":"Growing GeniA's Toolbox","text":""},{"location":"add-new-tool/#teaching-genia-new-skills-adding-tools-effortlessly","title":"Teaching GeniA new Skills: Adding Tools Effortlessly","text":"<p>Adding a new tool adheres to the OpenAI JSON configuration standards. This ensures compatibility, making it easy to import any existing function-calling project or ChatGPT plugin. The only missing component is a brief description guiding the model on when to use the function. We prefer to maintain this in a separate file - refer to the tools.yaml.</p> <p>GeniA is designed to be a quick learner, rapidly acquiring the capability to use new tools. We've made the learning process as straightforward as possible. Here's how you can teach GeniA:</p> <ol> <li>Incorporating Code Tools: By adding a simple specification, GeniA can invoke any class and method within your codebase. For instance, below is an example of integrating a utility tool from your software development suite:</li> </ol> <pre><code>- tool_name: bug_tracker_api\n  category: python\n  class: mypackage.utilities.bugtracker.BugTrackerAPIWrapper\n  method: run\n</code></pre> <ol> <li>Connecting to URLs: GeniA can perform GET requests with either path or request parameters. You can integrate this by providing a URL, as shown in this example, which fetches the current CI/CD pipeline status:</li> </ol> <pre><code>- tool_name: get_pipeline_status\n  title: fetch the current pipeline status\n  category: url\n  template: https://ci.yourserver.com/api/v1/pipeline?project_id={project_id}&amp;pipeline_id={pipeline_id}\n</code></pre> <ol> <li>Utilizing OpenAPI Swagger Files: Imagine your AI model being able to invoke any API out there - GeniA is capable of that! You can easily integrate any standard OpenAPI into GeniA using a Swagger file. This feature is still under development, but a working example is provided out of the box.</li> <li>Learning Natural Language Skills: This is where LLM truly shines. GeniA has an experimental feature that allows it to acquire new skills using natural language. It retains the steps taken to accomplish a task in its long-term memory, categorizes them under a new skill, and loads them into memory for future use. In this way, GeniA can learn and execute complex tasks, all in natural language.</li> </ol>"},{"location":"add-new-tool/#see-complete-function-documentation-here","title":"see complete function documentation here","text":""},{"location":"developer-guide/","title":"Developer Guide","text":""},{"location":"developer-guide/#run-genia-from-source-docker","title":"Run GeniA from source :: Docker","text":"<pre><code>git clone https://github.com/GeniA-dev/GeniA\ncd GeniA\ndocker build -t geniadev/genia:latest .\n</code></pre>"},{"location":"developer-guide/#run-via-docker","title":"Run via Docker","text":"<p>Handle secrets by copy the .env.template into <code>.env</code>, and put in <code>.env</code> the minimal secrets which is just <code>OPENAI_API_KEY</code></p>"},{"location":"developer-guide/#run-in-local-terminal-mode","title":"Run in local terminal mode","text":"<pre><code>docker run -p 5001:5001 --env-file ./.env -it geniadev/genia:latest\n</code></pre>"},{"location":"developer-guide/#run-in-slack-app-bot-mode","title":"Run in slack app bot mode","text":"<pre><code>docker run -p 5001:5001 --env-file ./.env -it geniadev/genia:latest slack\n</code></pre>"},{"location":"developer-guide/#run-genia-from-source-python","title":"Run GeniA from source :: Python","text":""},{"location":"developer-guide/#poetry-install","title":"Poetry install","text":"<pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre>"},{"location":"developer-guide/#run-in-local-terminal-mode_1","title":"Run in local terminal mode","text":"<pre><code>poetry run local\n</code></pre>"},{"location":"developer-guide/#run-in-slack-app-bot-mode_1","title":"Run in slack app bot mode","text":"<p>First install the bot</p> <pre><code>poetry run slack\n</code></pre>"},{"location":"developer-guide/#run-in-streamlit-mode","title":"Run in streamlit mode","text":"<pre><code>poetry run streamlit\n</code></pre>"},{"location":"developer-guide/#testing","title":"Testing","text":"<pre><code>poetry run pytest tests\n</code></pre>"},{"location":"faq/","title":"FAQ","text":"<p>Q. Does GeniA only work with OpenAI?   A. Under the hood GeniA is built upon the function-calling capabilities offered by OpenAI (OpenAI or Azure). GeniA requires OpenAI API Key, you can generate one here</p> <p>Q. How much is it going to cost?   A. GeniA uses OpenAI, be mindful of cost implications and ensure you set usage limits. You can configure both soft and hard limits at the following URL: https://platform.openai.com/account/billing/limits.</p> <p>Q. What OpenAI model is used by GeniA?   A. By default, GeniA is set to use <code>gpt-3.5-turbo-0613</code>. We acknowledge that <code>gpt-4-0613</code> often delivers superior results, but have found the 3.5 version to be a more cost-effective choice.</p>"},{"location":"genia-slack-app-bot/","title":"GeniA Slack App Bot","text":""},{"location":"genia-slack-app-bot/#installation","title":"Installation","text":"<p>For the Slack GPT Bot to function effectively, it's crucial to establish the correct permissions for your Slack bot. Please follow the forthcoming guidelines to set up the necessary permissions.</p> <p>Note</p> <p>When it comes to Choosing a protocol to connect to Slack, there are two primary options. In this instance, we utilize <code>Socket Mode</code>, enabling your app to leverage the <code>Events API</code> and the platform's interactive components without the need for a public HTTP Request URL. Instead of sending payloads to a public endpoint, Slack employs a WebSocket URL to communicate with your app.</p> <ol> <li>In the project's root directory, mv the .env.template into <code>.env</code> file and input your Slack keys</li> <li>Create a new Slack App.</li> <li>Navigate to your Slack API Dashboard and select the app you've created for this bot.</li> <li>On the left-hand side menu, click on <code>OAuth &amp; Permissions</code>.</li> <li>Within the <code>Scopes</code> division, there are two categories of scopes: <code>Bot Token Scopes</code> and <code>User Token Scopes</code>. Append the following scopes under <code>Bot Token Scopes</code>:    <code>app_mentions:read</code> <code>chat:write</code> <code>channels:history</code> <code>groups:history</code> <code>im:history</code> <code>mpim:history</code></li> <li>Ascend to the <code>OAuth Tokens for Your Workspace</code> and hit the <code>Install App To Workspace</code> button. This operation will produce the <code>SLACK_BOT_TOKEN</code>.</li> <li>On the left-hand side menu, click on <code>Socket Mode</code> and activate it. You'll be asked to <code>Generate an app-level token to enable Socket Mode</code>. Generate a token labeled <code>SLACK_APP_TOKEN</code> and include the <code>connections:write</code> scope.</li> <li>In the <code>Socket Mode</code> page's <code>Features affected</code> section, hit <code>Event Subscriptions</code> and switch <code>Enable Events</code> to the <code>On</code> state. Append the app_mention event, coupled with the <code>app_mentions:read</code> scope in the <code>Subscribe to bot events</code> subsection below the toggle.</li> </ol>"},{"location":"getting-started/","title":"Getting started","text":"<p>The easiest way to get started with GeniA is using Streamlit web app. Make sure you have <code>python3</code> &amp; <code>pip3</code> installed, then run:</p> <pre><code>pip3 install streamlit genia\n</code></pre> <p>Then you can run the streamlit web app by:</p> <pre><code>genia\n</code></pre> <p>You can also play with GeniA in a Terminal using GeniA 'local' mode.</p> <p>Both quick start options provide a sneak peek, but GeniA is crafted for team collaboration and works best in Slack.</p> <p>For simplicity, we recommend running it locally using Docker. If you want to run docker locally, please refer to the Installation section.</p>"},{"location":"getting-started/#open-ai-azure-deployment","title":"Open AI Azure deployment","text":"<p>When using Azure OpenAI, add those to your environment variables: <pre><code>OPENAI_API_DEPLOYMENT=\nOPENAI_API_TYPE=\"azure\"\nOPENAI_API_BASE=https://&lt;your-endpoint.openai.azure.com/\nOPENAI_API_VERSION=\"2023-07-01-preview\"\n</code></pre></p>"},{"location":"getting-started/#additional-notes","title":"Additional notes","text":""},{"location":"getting-started/#cost-implications","title":"Cost implications","text":"<p>GeniA uses OpenAI, be mindful of cost implications and ensure you set usage limits. You can configure both soft and hard limits at the following URL: https://platform.openai.com/account/billing/limits.</p>"},{"location":"getting-started/#model-version","title":"Model version","text":"<p>By default, GeniA is set to use <code>gpt-3.5-turbo-0613</code>. We acknowledge that <code>gpt-4-0613</code> often delivers superior results, but have found the 3.5 version to be a more cost-effective choice.</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#features","title":"Features","text":"<p>GeniA's unique features include:</p> <ol> <li>Production-Grade: Engineered for real-world applications.</li> <li>Collaborative assistant: Designed to make the development process more interactive and enjoyable.</li> <li>Proactively taking action: building, coding, executing, summarizing. not just giving you a good advice.</li> <li>Customizable and Extensible: As an open-source tool, GeniA can be tailored to your specific needs.</li> <li>Quick Learner: Rapidly adapts to new tools and APIs.</li> </ol>"},{"location":"introduction/#how-is-genia-different-from-chatgpt","title":"How is GeniA different from ChatGPT?","text":"<p>Safety Prioritized: While LLMs offer suggestions, GeniA goes a step further but with utmost caution. It's designed to function responsibly in live environments, ensuring it doesn't take unrestricted decisions.</p> <p>Beyond Recommendations: Where LLMs provide guidance, GeniA offers proactive assistance. It doesn't just advise on the steps you need to take but goes ahead to perform the tasks itself. You could provide a code snippet, and GeniA will handle its deployment to Lambda, integrating seamlessly with your production environment and CI/CD tools.</p> <p>Intelligent Tool Selection: GeniA is not just another tool, it's also a tool-finding system. It's designed to acquaint itself with an expansive set of tools. However, mindful of the limitations of the LLM context window and token costs, it optimizes and feeds the model with only the most relevant tools. Utilizing vector databases (FAISS by default), GeniA selects tools with descriptions that align best with your intent. This smart selection process allows GeniA to work more efficiently and be more responsive to your specific needs.</p> <p>GeniA can easily learn new tools: we have worked hard to prioritize the simplicity of adding a new tool to GeniA, read more about it here.</p>"},{"location":"introduction/#can-genia-interface-with-any-existing-api","title":"Can GeniA Interface with Any Existing API?","text":"<p>Yes! GeniA has the capability to connect with any available API. Although it's currently an active area of academic research rather than a full-fledged production-grade tool, we've adapted OpenAI's plugin approach for increased simplicity and wider integration possibilities. You can incorporate GeniA into any existing code classes or APIs.</p> <p>Our ultimate achievement is empowering GeniA to acquire new skills without necessitating model fine-tuning or, in many cases, redeployment of your service. However, it's worth noting that the introduction of a completely new tool might call for some prompt adjustments and testing.</p> <p>Presently, the authentication process for a new tool falls on the tool creator. However, we plan to standardize this aspect within the project framework shortly.</p>"},{"location":"introduction/#introducing-tools-30-enhance-coding-with-large-language-models","title":"Introducing Tools 3.0: Enhance Coding with Large Language Models","text":"<p>Tools 2.0 with low-code/no-code approaches have been revolutionary, allowing users to leverage drag-and-drop functions over traditional coding for certain use cases.</p> <p>However, with the advent of Language Learning Models (LLMs), Tools 3.0 pushes the boundary further, empowering everyone to write code using natural language. It signifies a shift from proprietary, restrictive design paradigms to a more open, innovative approach where the model assists in understanding and revising complex code snippets.</p> <p>Tools 3.0 negates the need for proprietary YAML files and vendor-specific domain languages (DSLs), urging users to rely on native code. Rather than waiting for vendor updates to fulfill requirements, users can now instruct LLMs to write code, create it themselves, or utilize the vast range of community-contributed tools.</p> <p>Remember, any class, method, or API available becomes a learning and application tool for GeniA. Tools 3.0 redefines coding, transforming it into an intuitive, flexible, and democratized process.</p> <p> </p>"},{"location":"security/","title":"Security","text":"<p>GeniA is stateless. It connects with cloud DBs for conversation storage and handles secrets via environment variables. Plans are in place for standard secrets store provider integration.</p> <p>On the subject of secrets management, the project currently utilizes environment variables, as defined in the .env.template file. However, we are actively developing integrations with standard secrets store providers for improved security.</p> <p>We presently advise the integration of GeniA within a designated private channel, accessible exclusively to a whitelist of approved engineers.</p> <p>We are actively developing Single Sign-On (SSO) and Role-Based Access Control (RBAC) features for GeniA. These enhancements are slated for release in the near future.</p>"},{"location":"supported-tools/","title":"Supported Tools","text":"<p>This is where the power of the community comes in! we need your help and support teaching GeniA more tools and best practices. adding more tools is super easy and fun!</p> <p> </p> <ol> <li>ArgoCD</li> <li>AWS</li> <li>GitHub</li> <li>Jenkins</li> <li>Kubernetes</li> <li>Open Policy Agent (OPA)</li> <li>PagerDuty</li> <li>Slack Webhook</li> <li>Dozens of more tools are coming really soon</li> </ol> <p>The details of supported tools can be found here. The list of OpenAI functions spec which used by the tools can be found here.</p>"},{"location":"tools3/","title":"We introduce Tools 3.0","text":""},{"location":"tools3/#enhanced-coding-with-large-language-models","title":"Enhanced Coding with Large Language Models","text":"<p>Up until now, using Tools 2.0 with low-code/no-code approaches have been revolutionary, allowing users to leverage drag-and-drop functions over traditional coding for certain use cases.</p> <p>However, with the advent of Language Learning Models (LLMs), Tools 3.0 pushes the boundary further, empowering everyone to write code using natural language. It signifies a shift from proprietary, restrictive design paradigms to a more open, innovative approach where the model assists in understanding and revising complex code snippets.</p> <p>Tools 3.0 negates the need for proprietary YAML files and vendor-specific domain languages (DSLs), urging users to rely on native code. Rather than waiting for vendor updates to fulfill requirements, users can now instruct LLMs to write code, create it themselves, or utilize the vast range of community-contributed tools.</p> <p>Remember, any class, method, or API available becomes a learning and application tool for GeniA. Tools 3.0 redefines coding, transforming it into an intuitive, flexible, and democratized process.</p> <p> </p>"},{"location":"contributing/","title":"Contributing","text":"<p>\ud83d\udc69\u200d\ud83d\udcbb\u2795\ud83d\udc68\u200d\ud83d\udcbb Fork GeniA repository, make your changes, and submit a pull request! We appreciate your contributions! \ud83d\ude4c\ud83c\udf1f\ud83d\udc96</p>"},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<p>We use GitHub Issues to track public bugs. Please ensure your description is clear and has sufficient instructions to be able to reproduce the issue.</p>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>We actively welcome your pull requests for new features. </p>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<ol> <li>Fork the repo and create your branch from <code>main</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>Ensure the test suite passes.</li> <li>Create your pull request!</li> </ol>"},{"location":"contributing/#coding-style","title":"Coding Style","text":"<p>Please follow the coding style already established in the project.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under its Apache 2.0 License.</p>"},{"location":"contributing/#creating-an-issue","title":"Creating an issue","text":"<p>Report a bug in GeniA by creating an issue Propose a change or feature request or suggest an improvement Ask questions on our discussion board and get in touch with our community</p>"},{"location":"contributing/bug_report/","title":"","text":""},{"location":"contributing/bug_report/#describe-the-bug","title":"Describe the bug","text":"<p>A clear and concise description of what the bug is.</p>"},{"location":"contributing/bug_report/#steps-to-reproduce-the-behavior","title":"Steps to reproduce the behavior","text":"<ol> <li>Type this '...'</li> <li>View the output '....'</li> <li>See error</li> </ol>"},{"location":"contributing/bug_report/#expected-vs-actual-behavior","title":"Expected vs actual behavior","text":"<p>A clear and concise description of what you expected to happen and what actually happened.</p>"},{"location":"contributing/bug_report/#screenshots","title":"Screenshots","text":"<p>If applicable, add screenshots to help explain your problem.</p>"},{"location":"contributing/bug_report/#logs","title":"Logs","text":"<p>Paste the activity. Redact if needed.</p>"},{"location":"contributing/bug_report/#additional-context","title":"Additional context","text":"<p>Add any other context about the problem here.</p>"},{"location":"contributing/feedback/","title":"GeniA Feedback","text":"<p>You can use this template to give us structured feedback or just wipe it and leave us a note. Thank you!</p>"},{"location":"contributing/feedback/#what-have-you-loved","title":"What have you loved?","text":"<p>eg \"adding skill in natural language is awesome!\"</p>"},{"location":"contributing/feedback/#what-was-confusing-or-gave-you-pause","title":"What was confusing or gave you pause?","text":"<p>eg \"it did something unexpected\"</p>"},{"location":"contributing/feedback/#are-there-features-youd-like-to-see-added","title":"Are there features you'd like to see added?","text":"<p>eg \"Support more cloud providers, e.g Azure\"</p>"},{"location":"contributing/feedback/#anything-else","title":"Anything else?","text":"<p>eg \"have a nice day\"</p>"},{"location":"contributing/submit-a-request/","title":"","text":""},{"location":"contributing/submit-a-request/#describe-the-feature-or-problem-youd-like-to-solve","title":"Describe the feature or problem you\u2019d like to solve","text":"<p>A clear and concise description of what the feature or problem is.</p>"},{"location":"contributing/submit-a-request/#proposed-solution","title":"Proposed solution","text":"<p>How will it benefit GeniA and its users?</p>"},{"location":"contributing/submit-a-request/#additional-context","title":"Additional context","text":"<p>Add any other context like screenshots or mockups are helpful, if applicable.</p>"}]}